/*
int a = 20;//4个字节-32个比特位 
//00000000000000000000000000010100 - 原码
//00000000000000000000000000010100 - 反码
//00000000000000000000000000010100 - 补码
int b = -10;
//10000000000000000000000000001010 - 原码
//11111111111111111111111111110101 - 反码
//11111111111111111111111111110110 - 补码 

整数分为有符号数和无符号数，其中有符号数又分为正数和负数 
计算机中的整型有符号数有三种表示方式-原码 反码 补码  
//无符号数也有原码 反码 补码，只不过表现形式相同 
//在有符号数的正数当中，正数的原码 反码 补码的表现形式也相同 
三种表示方法均有符号位和数值位的两部分，符号为用0表示正，用1表示负

原码-直接将二进制按照正负数的形式翻译成二进制就可以
反码-将原码的符号位不变，其他位依次按位取反就可以得到了 
补码-反码+1得到补码 

对于整形来说，数据存放内存中的其实存放的是补码(整数) 
在计算机系统中，数值一律用补码来表示和存储，原因在于，使用补码可以将符号位和数值域统一处理 
同时，加法和减法也可以统一处理(CPU只有加法器)此外，补码与原码相互转换，其运算过程是相同的 
不需要额外的硬件电路

 int main()
 {
 	1 - 1;	
	//1 + (-1)
	//0000000000000000000000000001 
 	//1111111111111111111111111111
 	//0000000000000000000000000000
 	
	return 0;
}
	
大端(存储)模式，是指数据的低位保存在内存的高地址中，而数据的高位，保存在内存的低地址中(字节顺序) 
小端(存储)模式，是指数据的低位保存在内存的低地址中，而数据的高位，保存在内村的高地址中(字节顺序) 
 
*/ 
